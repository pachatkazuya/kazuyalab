name: app

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: aks-kazuyalab
  cancel-in-progress: true

env:
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  AKS_NAME:       ${{ vars.AKS_NAME }}
  ACR_NAME:       ${{ vars.ACR_NAME }}
  K8S_NAMESPACE:  ${{ vars.K8S_NAMESPACE }}
  HELM_CHART_PATH:${{ vars.HELM_CHART_PATH }}
  IMAGE_NAME:     ${{ vars.IMAGE_NAME }}
  DOCKERFILE_PATH:${{ vars.DOCKERFILE_PATH }}
  BUILD_CONTEXT:  ${{ vars.BUILD_CONTEXT }}

jobs:
  build_push_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id:       ${{ vars.AZURE_CLIENT_ID }}
          tenant-id:       ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Verify required variables and paths
        run: |
          set -euo pipefail
          for v in RESOURCE_GROUP AKS_NAME ACR_NAME K8S_NAMESPACE HELM_CHART_PATH IMAGE_NAME DOCKERFILE_PATH BUILD_CONTEXT; do
            [ -n "${!v:-}" ] || { echo "Missing repo variable: $v"; exit 1; }
          done
          [ -f "$DOCKERFILE_PATH" ] || { echo "Dockerfile not found at $DOCKERFILE_PATH"; exit 1; }
          [ -d "$BUILD_CONTEXT" ] || { echo "Build context not found at $BUILD_CONTEXT"; exit 1; }
          [ -d "$HELM_CHART_PATH" ] || { echo "Helm chart not found at $HELM_CHART_PATH"; exit 1; }

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get ACR login server
        id: acr
        run: echo "login_server=$(az acr show -n "$ACR_NAME" --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Get ACR access token
        id: acrtok
        run: echo "token=$(az acr login -n "$ACR_NAME" --expose-token --query accessToken -o tsv)" >> $GITHUB_OUTPUT

      - name: Docker login to ACR (token)
        uses: docker/login-action@v3
        with:
          registry:  ${{ steps.acr.outputs.login_server }}
          username:  00000000-0000-0000-0000-000000000000
          password:  ${{ steps.acrtok.outputs.token }}

      - name: Build & Push
        run: |
          set -euo pipefail
          IMAGE="${{ steps.acr.outputs.login_server }}/${IMAGE_NAME}:${GITHUB_SHA}"
          docker build -f "$DOCKERFILE_PATH" -t "$IMAGE" "$BUILD_CONTEXT"
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Get AKS credentials
        run: az aks get-credentials -g "$RESOURCE_GROUP" -n "$AKS_NAME" --overwrite-existing

      - name: Helm upgrade/install
        run: |
          helm upgrade --install kazapp "$HELM_CHART_PATH" \
            --namespace "$K8S_NAMESPACE" --create-namespace \
            --set image.repository=${{ steps.acr.outputs.login_server }}/${IMAGE_NAME} \
            --set image.tag=${GITHUB_SHA}
